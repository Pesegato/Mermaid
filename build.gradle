import org.gradle.api.publish.maven.MavenPublication

plugins {
	id "java"
	id "maven-publish"
//  id "eclipse"
	id "idea"
	id 'com.palantir.git-version' version '0.12.3'
}

project.version gitVersion()

println("version : '${version}'")

//version = "0.1.0-SNAPSHOT-${new Date().format("yyyyMMdd-HHmmss")}"
group = "com.pesegato"


ext {
	jvm = org.gradle.internal.jvm.Jvm.current()
	javaVersion = JavaVersion.current()
	isCiServer = System.getenv("TRAVIS") || System.getenv().containsKey("TEAMCITY_VERSION") || hasProperty('CI') || System.getenv("JITPACK")
	isWindows = org.gradle.internal.os.OperatingSystem.current().windows
	jmonkeyengine_version = '3.4.0-stable'
}

repositories {
    jcenter()
	maven { url "https://jitpack.io" }
}

def jme3 = ["v" : '3.2.1-stable', "g": "org.jmonkeyengine"]
def pesegato = ["g" :"com.pesegato" ,"v":"latest.integration"]
if (isCiServer){
	pesegato.g="com.github.Pesegato"
	pesegato.v="-SNAPSHOT"
}

dependencies {
	implementation fileTree(dir: 'lib', include: ['*.jar'])

	implementation "org.jmonkeyengine:jme3-lwjgl3:${jme3.v}"
	implementation "com.simsilica:lemur:1.8.2"
	implementation 'org.slf4j:slf4j-api:1.7.13'
	implementation 'com.google.guava:guava:19.0'
	implementation "com.github.pesegato:GoldMonkey:[0.7,)"
	implementation 'com.google.code.gson:gson:2.7'
	runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'

}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava.doLast {
	def buildDate = new Date().format('yyyy-MM-dd HHmm')
	println "Writing ${rootProject.name}.build.date: " + buildDate
	new File(destinationDir, "${rootProject.name}.build.date").text = buildDate
	new File(destinationDir, "${rootProject.name}.build.version").text = "${version}"
}


task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier.set("javadoc")
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}
