plugins {
	id "java"
	id "maven"
//  id "eclipse"
//  id "idea"
    id 'pl.allegro.tech.build.axion-release' version '1.4.0'
}

scmVersion {
    tag {
        prefix = 'Mermaid'
    }
}

project.version = scmVersion.version
def fullversion = "git describe --always --dirty".execute().text.trim()
println("version : '${project.version}/${fullversion}'")

//name = the directory name
//version = "0.1.0"

//version = "0.1.0-SNAPSHOT-${new Date().format("yyyyMMdd-HHmmss")}"
group = "com.pesegato"


ext {
	jvm = org.gradle.internal.jvm.Jvm.current()
	javaVersion = JavaVersion.current()
	isCiServer = System.getenv("TRAVIS") || System.getenv().containsKey("TEAMCITY_VERSION") || hasProperty('CI') || System.getenv("JITPACK")
	isWindows = org.gradle.internal.os.OperatingSystem.current().windows
	jmonkeyengine_version = '[3.1,)'
}

repositories {
	mavenLocal()
    jcenter()
	maven { url "https://jitpack.io" }
}

def jme3 = ["v" : '[3.1,)', "g": "org.jmonkeyengine"]
def pesegato = ["g" :"com.pesegato" ,"v":"latest.integration"]
if (isCiServer){
	pesegato.g="com.github.Pesegato"
	pesegato.v="-SNAPSHOT"
}

dependencies {
	compile fileTree(dir: 'lib', include: ['*.jar'])

	compile "org.lwjgl.lwjgl:lwjgl3:${jme3.v}"
	compile "${jme3.g}:jme3-core:${jme3.v}"
	compile "com.simsilica:lemur:1.8.2"
	compile 'org.slf4j:slf4j-api:1.7.13'
    compile 'com.google.guava:guava:19.0'
	compile "${pesegato.g}:GoldMonkey:${pesegato.v}"
	compile 'com.google.code.gson:gson:2.7'
	runtime 'ch.qos.logback:logback-classic:1.1.2'

}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava.doLast {
	def buildDate = new Date().format('yyyy-MM-dd HHmm')
	println "Writing ${scmVersion.tag.prefix}.build.date: " + buildDate
	new File(destinationDir, "${scmVersion.tag.prefix}.build.date").text = buildDate
	new File(destinationDir, "${scmVersion.tag.prefix}.build.version").text = "${fullversion}"
}


task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}
